
GK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002560  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800266c  0800266c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800268c  0800268c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  0800268c  0800268c  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800268c  0800268c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000003c  080026d0  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080026d0  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000862b  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001995  00000000  00000000  00028690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002a028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002aa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c1d  00000000  00000000  0002b358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6a4  00000000  00000000  00041f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081eac  00000000  00000000  0004d619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf4c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002808  00000000  00000000  000cf518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002654 	.word	0x08002654

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002654 	.word	0x08002654

0800014c <init_button>:
int button_flag[NUM_OF_BUTTONS] = { 0 };
int longButton_flag[NUM_OF_BUTTONS] = { 0 };
int isLongButtonPressed[NUM_OF_BUTTONS] = { 0 };
int TimeOutForKeyPress[NUM_OF_BUTTONS];

void init_button() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, NORMAL_STATE);
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	4807      	ldr	r0, [pc, #28]	; (8000174 <init_button+0x28>)
 8000156:	f001 fa54 	bl	8001602 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INC_GPIO_Port, INC_Pin, NORMAL_STATE);
 800015a:	2201      	movs	r2, #1
 800015c:	2102      	movs	r1, #2
 800015e:	4805      	ldr	r0, [pc, #20]	; (8000174 <init_button+0x28>)
 8000160:	f001 fa4f 	bl	8001602 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEC_GPIO_Port, DEC_Pin, NORMAL_STATE);
 8000164:	2201      	movs	r2, #1
 8000166:	2104      	movs	r1, #4
 8000168:	4802      	ldr	r0, [pc, #8]	; (8000174 <init_button+0x28>)
 800016a:	f001 fa4a 	bl	8001602 <HAL_GPIO_WritePin>
}
 800016e:	bf00      	nop
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40010c00 	.word	0x40010c00

08000178 <isButtonPressed>:

int isButtonPressed(int index) {
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000180:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <isButtonPressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000188:	2b01      	cmp	r3, #1
 800018a:	d106      	bne.n	800019a <isButtonPressed+0x22>
		button_flag[index] = 0;
 800018c:	4a06      	ldr	r2, [pc, #24]	; (80001a8 <isButtonPressed+0x30>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	2100      	movs	r1, #0
 8000192:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000196:	2301      	movs	r3, #1
 8000198:	e000      	b.n	800019c <isButtonPressed+0x24>
	}
	return 0;
 800019a:	2300      	movs	r3, #0
}
 800019c:	4618      	mov	r0, r3
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	20000058 	.word	0x20000058

080001ac <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int index) {
 80001ac:	b480      	push	{r7}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <subKeyProcess+0x1c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2101      	movs	r1, #1
 80001ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001be:	bf00      	nop
 80001c0:	370c      	adds	r7, #12
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	20000058 	.word	0x20000058

080001cc <longKeyProcess>:

void longKeyProcess(int index) {
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	longButton_flag[index] = 1;
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <longKeyProcess+0x1c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2101      	movs	r1, #1
 80001da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	20000064 	.word	0x20000064

080001ec <getKeyInput>:

void getKeyInput() {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
	init_button();
 80001f2:	f7ff ffab 	bl	800014c <init_button>
	//we use same method for reading input from the buttons
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001f6:	2300      	movs	r3, #0
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	e0ba      	b.n	8000372 <getKeyInput+0x186>
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 80001fc:	4a61      	ldr	r2, [pc, #388]	; (8000384 <getKeyInput+0x198>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000204:	4960      	ldr	r1, [pc, #384]	; (8000388 <getKeyInput+0x19c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounceButtonBuffer2[i] = buttonBuffer[i];
 800020c:	4a5f      	ldr	r2, [pc, #380]	; (800038c <getKeyInput+0x1a0>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	495b      	ldr	r1, [pc, #364]	; (8000384 <getKeyInput+0x198>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//read input corresponding to the [i] button
		if (i == 0) {
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d10a      	bne.n	8000238 <getKeyInput+0x4c>
			buttonBuffer[i] = HAL_GPIO_ReadPin(RESET_GPIO_Port,
 8000222:	2101      	movs	r1, #1
 8000224:	485a      	ldr	r0, [pc, #360]	; (8000390 <getKeyInput+0x1a4>)
 8000226:	f001 f9d5 	bl	80015d4 <HAL_GPIO_ReadPin>
 800022a:	4603      	mov	r3, r0
 800022c:	4619      	mov	r1, r3
 800022e:	4a57      	ldr	r2, [pc, #348]	; (800038c <getKeyInput+0x1a0>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000236:	e01a      	b.n	800026e <getKeyInput+0x82>
			RESET_Pin);
		} else if (i == 1) {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d10a      	bne.n	8000254 <getKeyInput+0x68>
			buttonBuffer[i] = HAL_GPIO_ReadPin(INC_GPIO_Port,
 800023e:	2102      	movs	r1, #2
 8000240:	4853      	ldr	r0, [pc, #332]	; (8000390 <getKeyInput+0x1a4>)
 8000242:	f001 f9c7 	bl	80015d4 <HAL_GPIO_ReadPin>
 8000246:	4603      	mov	r3, r0
 8000248:	4619      	mov	r1, r3
 800024a:	4a50      	ldr	r2, [pc, #320]	; (800038c <getKeyInput+0x1a0>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000252:	e00c      	b.n	800026e <getKeyInput+0x82>
			INC_Pin);
		} else if (i == 2) {
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b02      	cmp	r3, #2
 8000258:	d109      	bne.n	800026e <getKeyInput+0x82>
			buttonBuffer[i] = HAL_GPIO_ReadPin(DEC_GPIO_Port,
 800025a:	2104      	movs	r1, #4
 800025c:	484c      	ldr	r0, [pc, #304]	; (8000390 <getKeyInput+0x1a4>)
 800025e:	f001 f9b9 	bl	80015d4 <HAL_GPIO_ReadPin>
 8000262:	4603      	mov	r3, r0
 8000264:	4619      	mov	r1, r3
 8000266:	4a49      	ldr	r2, [pc, #292]	; (800038c <getKeyInput+0x1a0>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			DEC_Pin);
		}
		//debouncing the interference signal
		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 800026e:	4a46      	ldr	r2, [pc, #280]	; (8000388 <getKeyInput+0x19c>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000276:	4943      	ldr	r1, [pc, #268]	; (8000384 <getKeyInput+0x198>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027e:	429a      	cmp	r2, r3
 8000280:	d174      	bne.n	800036c <getKeyInput+0x180>
				&& (debounceButtonBuffer2[i] == buttonBuffer[i])) {
 8000282:	4a40      	ldr	r2, [pc, #256]	; (8000384 <getKeyInput+0x198>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028a:	4940      	ldr	r1, [pc, #256]	; (800038c <getKeyInput+0x1a0>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000292:	429a      	cmp	r2, r3
 8000294:	d16a      	bne.n	800036c <getKeyInput+0x180>
			//this below condition helps us to indicate whether we push the button or not
			if (buttonBuffer[i] != longPressButtonBuffer[i]) {
 8000296:	4a3d      	ldr	r2, [pc, #244]	; (800038c <getKeyInput+0x1a0>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029e:	493d      	ldr	r1, [pc, #244]	; (8000394 <getKeyInput+0x1a8>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d038      	beq.n	800031c <getKeyInput+0x130>
				longPressButtonBuffer[i] = buttonBuffer[i];
 80002aa:	4a38      	ldr	r2, [pc, #224]	; (800038c <getKeyInput+0x1a0>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b2:	4938      	ldr	r1, [pc, #224]	; (8000394 <getKeyInput+0x1a8>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				//if we first time push the button for long time,
				//it will store with the signal isLongButtonPressed and set wait time to 3s
				if (buttonBuffer[i] == PRESSED_STATE
 80002ba:	4a34      	ldr	r2, [pc, #208]	; (800038c <getKeyInput+0x1a0>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d10f      	bne.n	80002e6 <getKeyInput+0xfa>
						&& isLongButtonPressed[i] == 0) {
 80002c6:	4a34      	ldr	r2, [pc, #208]	; (8000398 <getKeyInput+0x1ac>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d109      	bne.n	80002e6 <getKeyInput+0xfa>
					TimeOutForKeyPress[i] = TIME_OUT_FOR_KEY_PRESS;
 80002d2:	4a32      	ldr	r2, [pc, #200]	; (800039c <getKeyInput+0x1b0>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f7ff ff64 	bl	80001ac <subKeyProcess>
 80002e4:	e042      	b.n	800036c <getKeyInput+0x180>
				}
				//if we still push the button for long time,
				//it will regconize and change the wait time to 1s
				else if (buttonBuffer[i] == PRESSED_STATE
 80002e6:	4a29      	ldr	r2, [pc, #164]	; (800038c <getKeyInput+0x1a0>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d10e      	bne.n	8000310 <getKeyInput+0x124>
						&& isLongButtonPressed[i] == 1) {
 80002f2:	4a29      	ldr	r2, [pc, #164]	; (8000398 <getKeyInput+0x1ac>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d108      	bne.n	8000310 <getKeyInput+0x124>
					TimeOutForKeyPress[i] = TIME_OUT_FOR_LONG_KEY_PRESS;
 80002fe:	4a27      	ldr	r2, [pc, #156]	; (800039c <getKeyInput+0x1b0>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2164      	movs	r1, #100	; 0x64
 8000304:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f7ff ff4f 	bl	80001ac <subKeyProcess>
 800030e:	e02d      	b.n	800036c <getKeyInput+0x180>
				}

				else {
					isLongButtonPressed[i] = 0;
 8000310:	4a21      	ldr	r2, [pc, #132]	; (8000398 <getKeyInput+0x1ac>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2100      	movs	r1, #0
 8000316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800031a:	e027      	b.n	800036c <getKeyInput+0x180>
				}
			}

			else {
				//counter reference counts down until 0, then it will activate the button again
				TimeOutForKeyPress[i]--;
 800031c:	4a1f      	ldr	r2, [pc, #124]	; (800039c <getKeyInput+0x1b0>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000324:	1e5a      	subs	r2, r3, #1
 8000326:	491d      	ldr	r1, [pc, #116]	; (800039c <getKeyInput+0x1b0>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 800032e:	4a1b      	ldr	r2, [pc, #108]	; (800039c <getKeyInput+0x1b0>)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d10d      	bne.n	8000356 <getKeyInput+0x16a>
					isLongButtonPressed[i] = 1;
 800033a:	4a17      	ldr	r2, [pc, #92]	; (8000398 <getKeyInput+0x1ac>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2101      	movs	r1, #1
 8000340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					longKeyProcess(i);
 8000344:	6878      	ldr	r0, [r7, #4]
 8000346:	f7ff ff41 	bl	80001cc <longKeyProcess>
					longPressButtonBuffer[i] = NORMAL_STATE;
 800034a:	4a12      	ldr	r2, [pc, #72]	; (8000394 <getKeyInput+0x1a8>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2101      	movs	r1, #1
 8000350:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000354:	e00a      	b.n	800036c <getKeyInput+0x180>
				}

				else if (isLongButtonPressed[i] == 1) {
 8000356:	4a10      	ldr	r2, [pc, #64]	; (8000398 <getKeyInput+0x1ac>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d104      	bne.n	800036c <getKeyInput+0x180>
					isLongButtonPressed[i] = 0;
 8000362:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <getKeyInput+0x1ac>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2100      	movs	r1, #0
 8000368:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3301      	adds	r3, #1
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2b02      	cmp	r3, #2
 8000376:	f77f af41 	ble.w	80001fc <getKeyInput+0x10>
				}
			}
		}
	}
}
 800037a:	bf00      	nop
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000018 	.word	0x20000018
 8000388:	2000000c 	.word	0x2000000c
 800038c:	20000000 	.word	0x20000000
 8000390:	40010c00 	.word	0x40010c00
 8000394:	20000024 	.word	0x20000024
 8000398:	20000070 	.word	0x20000070
 800039c:	2000007c 	.word	0x2000007c

080003a0 <fsm_simple_buttons_run>:

#include "fsm_normal.h"

//if any button signal is regconized, timer1 will be set to 10s
//after 10s without any buttons pushed, the mode will be changed to AUTO
void fsm_simple_buttons_run() {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	switch (mode) {
 80003a4:	4ba8      	ldr	r3, [pc, #672]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b04      	cmp	r3, #4
 80003aa:	f200 81e5 	bhi.w	8000778 <fsm_simple_buttons_run+0x3d8>
 80003ae:	a201      	add	r2, pc, #4	; (adr r2, 80003b4 <fsm_simple_buttons_run+0x14>)
 80003b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b4:	080003c9 	.word	0x080003c9
 80003b8:	080003e9 	.word	0x080003e9
 80003bc:	080004c3 	.word	0x080004c3
 80003c0:	0800059d 	.word	0x0800059d
 80003c4:	08000685 	.word	0x08000685
	//In INIT state, it will initialize value of counter and change mode into AUTO mode

	case INIT:
		counter = 9;
 80003c8:	4ba0      	ldr	r3, [pc, #640]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 80003ca:	2209      	movs	r2, #9
 80003cc:	601a      	str	r2, [r3, #0]
		update7SEG(counter);
 80003ce:	4b9f      	ldr	r3, [pc, #636]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fbb4 	bl	8000b40 <update7SEG>
		setTimer3(1000);
 80003d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003dc:	f000 fd86 	bl	8000eec <setTimer3>
		mode = AUTO;
 80003e0:	4b99      	ldr	r3, [pc, #612]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	601a      	str	r2, [r3, #0]
		break;
 80003e6:	e1d0      	b.n	800078a <fsm_simple_buttons_run+0x3ea>
	case RESET_MODE:
		//if push RESET button, counter will be reset to 0
		if (isButtonPressed(0) == 1) {
 80003e8:	2000      	movs	r0, #0
 80003ea:	f7ff fec5 	bl	8000178 <isButtonPressed>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d10f      	bne.n	8000414 <fsm_simple_buttons_run+0x74>
			setTimer1(10000);
 80003f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80003f8:	f000 fd40 	bl	8000e7c <setTimer1>
			mode = RESET_MODE;
 80003fc:	4b92      	ldr	r3, [pc, #584]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 80003fe:	2201      	movs	r2, #1
 8000400:	601a      	str	r2, [r3, #0]
			counter = 0;
 8000402:	4b92      	ldr	r3, [pc, #584]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
			update7SEG(counter);
 8000408:	4b90      	ldr	r3, [pc, #576]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4618      	mov	r0, r3
 800040e:	f000 fb97 	bl	8000b40 <update7SEG>

		} else if (timer1_flag == 1) {
			setTimer2(1000);
			mode = AUTO;
		}
		break;
 8000412:	e1b3      	b.n	800077c <fsm_simple_buttons_run+0x3dc>
		else if (isButtonPressed(1) == 1) {
 8000414:	2001      	movs	r0, #1
 8000416:	f7ff feaf 	bl	8000178 <isButtonPressed>
 800041a:	4603      	mov	r3, r0
 800041c:	2b01      	cmp	r3, #1
 800041e:	d11e      	bne.n	800045e <fsm_simple_buttons_run+0xbe>
			setTimer1(10000);
 8000420:	f242 7010 	movw	r0, #10000	; 0x2710
 8000424:	f000 fd2a 	bl	8000e7c <setTimer1>
			mode = INC;
 8000428:	4b87      	ldr	r3, [pc, #540]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 800042a:	2202      	movs	r2, #2
 800042c:	601a      	str	r2, [r3, #0]
			if (counter == 9) {
 800042e:	4b87      	ldr	r3, [pc, #540]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b09      	cmp	r3, #9
 8000434:	d108      	bne.n	8000448 <fsm_simple_buttons_run+0xa8>
				counter = 0;
 8000436:	4b85      	ldr	r3, [pc, #532]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
				update7SEG(counter);
 800043c:	4b83      	ldr	r3, [pc, #524]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4618      	mov	r0, r3
 8000442:	f000 fb7d 	bl	8000b40 <update7SEG>
		break;
 8000446:	e199      	b.n	800077c <fsm_simple_buttons_run+0x3dc>
				counter = counter + 1;
 8000448:	4b80      	ldr	r3, [pc, #512]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	4a7f      	ldr	r2, [pc, #508]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000450:	6013      	str	r3, [r2, #0]
				update7SEG(counter);
 8000452:	4b7e      	ldr	r3, [pc, #504]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fb72 	bl	8000b40 <update7SEG>
		break;
 800045c:	e18e      	b.n	800077c <fsm_simple_buttons_run+0x3dc>
		else if (isButtonPressed(2) == 1) {
 800045e:	2002      	movs	r0, #2
 8000460:	f7ff fe8a 	bl	8000178 <isButtonPressed>
 8000464:	4603      	mov	r3, r0
 8000466:	2b01      	cmp	r3, #1
 8000468:	d11e      	bne.n	80004a8 <fsm_simple_buttons_run+0x108>
			setTimer1(10000);
 800046a:	f242 7010 	movw	r0, #10000	; 0x2710
 800046e:	f000 fd05 	bl	8000e7c <setTimer1>
			mode = DEC;
 8000472:	4b75      	ldr	r3, [pc, #468]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 8000474:	2203      	movs	r2, #3
 8000476:	601a      	str	r2, [r3, #0]
			if (counter == 0) {
 8000478:	4b74      	ldr	r3, [pc, #464]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d108      	bne.n	8000492 <fsm_simple_buttons_run+0xf2>
				counter = 9;
 8000480:	4b72      	ldr	r3, [pc, #456]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000482:	2209      	movs	r2, #9
 8000484:	601a      	str	r2, [r3, #0]
				update7SEG(counter);
 8000486:	4b71      	ldr	r3, [pc, #452]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fb58 	bl	8000b40 <update7SEG>
		break;
 8000490:	e174      	b.n	800077c <fsm_simple_buttons_run+0x3dc>
				counter = counter - 1;
 8000492:	4b6e      	ldr	r3, [pc, #440]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	3b01      	subs	r3, #1
 8000498:	4a6c      	ldr	r2, [pc, #432]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800049a:	6013      	str	r3, [r2, #0]
				update7SEG(counter);
 800049c:	4b6b      	ldr	r3, [pc, #428]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fb4d 	bl	8000b40 <update7SEG>
		break;
 80004a6:	e169      	b.n	800077c <fsm_simple_buttons_run+0x3dc>
		} else if (timer1_flag == 1) {
 80004a8:	4b69      	ldr	r3, [pc, #420]	; (8000650 <fsm_simple_buttons_run+0x2b0>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	f040 8165 	bne.w	800077c <fsm_simple_buttons_run+0x3dc>
			setTimer2(1000);
 80004b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b6:	f000 fcfd 	bl	8000eb4 <setTimer2>
			mode = AUTO;
 80004ba:	4b63      	ldr	r3, [pc, #396]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 80004bc:	2204      	movs	r2, #4
 80004be:	601a      	str	r2, [r3, #0]
		break;
 80004c0:	e15c      	b.n	800077c <fsm_simple_buttons_run+0x3dc>
	case INC:
		if (isButtonPressed(0) == 1) {
 80004c2:	2000      	movs	r0, #0
 80004c4:	f7ff fe58 	bl	8000178 <isButtonPressed>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d10f      	bne.n	80004ee <fsm_simple_buttons_run+0x14e>
			setTimer1(10000);
 80004ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80004d2:	f000 fcd3 	bl	8000e7c <setTimer1>
			mode = RESET_MODE;
 80004d6:	4b5c      	ldr	r3, [pc, #368]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 80004d8:	2201      	movs	r2, #1
 80004da:	601a      	str	r2, [r3, #0]
			counter = 0;
 80004dc:	4b5b      	ldr	r3, [pc, #364]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
			update7SEG(counter);
 80004e2:	4b5a      	ldr	r3, [pc, #360]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 fb2a 	bl	8000b40 <update7SEG>

		else if (timer1_flag == 1) {
			setTimer2(1000);
			mode = AUTO;
		}
		break;
 80004ec:	e148      	b.n	8000780 <fsm_simple_buttons_run+0x3e0>
		} else if (isButtonPressed(1) == 1) {
 80004ee:	2001      	movs	r0, #1
 80004f0:	f7ff fe42 	bl	8000178 <isButtonPressed>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d11e      	bne.n	8000538 <fsm_simple_buttons_run+0x198>
			setTimer1(10000);
 80004fa:	f242 7010 	movw	r0, #10000	; 0x2710
 80004fe:	f000 fcbd 	bl	8000e7c <setTimer1>
			mode = INC;
 8000502:	4b51      	ldr	r3, [pc, #324]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 8000504:	2202      	movs	r2, #2
 8000506:	601a      	str	r2, [r3, #0]
			if (counter == 9) {
 8000508:	4b50      	ldr	r3, [pc, #320]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b09      	cmp	r3, #9
 800050e:	d108      	bne.n	8000522 <fsm_simple_buttons_run+0x182>
				counter = 0;
 8000510:	4b4e      	ldr	r3, [pc, #312]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
				update7SEG(counter);
 8000516:	4b4d      	ldr	r3, [pc, #308]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fb10 	bl	8000b40 <update7SEG>
		break;
 8000520:	e12e      	b.n	8000780 <fsm_simple_buttons_run+0x3e0>
				counter = counter + 1;
 8000522:	4b4a      	ldr	r3, [pc, #296]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	4a48      	ldr	r2, [pc, #288]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800052a:	6013      	str	r3, [r2, #0]
				update7SEG(counter);
 800052c:	4b47      	ldr	r3, [pc, #284]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fb05 	bl	8000b40 <update7SEG>
		break;
 8000536:	e123      	b.n	8000780 <fsm_simple_buttons_run+0x3e0>
		} else if (isButtonPressed(2) == 1) {
 8000538:	2002      	movs	r0, #2
 800053a:	f7ff fe1d 	bl	8000178 <isButtonPressed>
 800053e:	4603      	mov	r3, r0
 8000540:	2b01      	cmp	r3, #1
 8000542:	d11e      	bne.n	8000582 <fsm_simple_buttons_run+0x1e2>
			setTimer1(10000);
 8000544:	f242 7010 	movw	r0, #10000	; 0x2710
 8000548:	f000 fc98 	bl	8000e7c <setTimer1>
			mode = DEC;
 800054c:	4b3e      	ldr	r3, [pc, #248]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 800054e:	2203      	movs	r2, #3
 8000550:	601a      	str	r2, [r3, #0]
			if (counter == 0) {
 8000552:	4b3e      	ldr	r3, [pc, #248]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d108      	bne.n	800056c <fsm_simple_buttons_run+0x1cc>
				counter = 9;
 800055a:	4b3c      	ldr	r3, [pc, #240]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800055c:	2209      	movs	r2, #9
 800055e:	601a      	str	r2, [r3, #0]
				update7SEG(counter);
 8000560:	4b3a      	ldr	r3, [pc, #232]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f000 faeb 	bl	8000b40 <update7SEG>
		break;
 800056a:	e109      	b.n	8000780 <fsm_simple_buttons_run+0x3e0>
				counter = counter - 1;
 800056c:	4b37      	ldr	r3, [pc, #220]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3b01      	subs	r3, #1
 8000572:	4a36      	ldr	r2, [pc, #216]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000574:	6013      	str	r3, [r2, #0]
				update7SEG(counter);
 8000576:	4b35      	ldr	r3, [pc, #212]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fae0 	bl	8000b40 <update7SEG>
		break;
 8000580:	e0fe      	b.n	8000780 <fsm_simple_buttons_run+0x3e0>
		else if (timer1_flag == 1) {
 8000582:	4b33      	ldr	r3, [pc, #204]	; (8000650 <fsm_simple_buttons_run+0x2b0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	f040 80fa 	bne.w	8000780 <fsm_simple_buttons_run+0x3e0>
			setTimer2(1000);
 800058c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000590:	f000 fc90 	bl	8000eb4 <setTimer2>
			mode = AUTO;
 8000594:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 8000596:	2204      	movs	r2, #4
 8000598:	601a      	str	r2, [r3, #0]
		break;
 800059a:	e0f1      	b.n	8000780 <fsm_simple_buttons_run+0x3e0>
	case DEC:
		if (isButtonPressed(0) == 1) {
 800059c:	2000      	movs	r0, #0
 800059e:	f7ff fdeb 	bl	8000178 <isButtonPressed>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d10f      	bne.n	80005c8 <fsm_simple_buttons_run+0x228>
			setTimer1(10000);
 80005a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80005ac:	f000 fc66 	bl	8000e7c <setTimer1>
			mode = RESET_MODE;
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
			counter = 0;
 80005b6:	4b25      	ldr	r3, [pc, #148]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
			update7SEG(counter);
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fabd 	bl	8000b40 <update7SEG>

		else if (timer1_flag == 1) {
			setTimer2(1000);
			mode = AUTO;
		}
		break;
 80005c6:	e0dd      	b.n	8000784 <fsm_simple_buttons_run+0x3e4>
		} else if (isButtonPressed(1) == 1) {
 80005c8:	2001      	movs	r0, #1
 80005ca:	f7ff fdd5 	bl	8000178 <isButtonPressed>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d11e      	bne.n	8000612 <fsm_simple_buttons_run+0x272>
			setTimer1(10000);
 80005d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80005d8:	f000 fc50 	bl	8000e7c <setTimer1>
			mode = INC;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 80005de:	2202      	movs	r2, #2
 80005e0:	601a      	str	r2, [r3, #0]
			if (counter == 9) {
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b09      	cmp	r3, #9
 80005e8:	d108      	bne.n	80005fc <fsm_simple_buttons_run+0x25c>
				counter = 0;
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
				update7SEG(counter);
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 faa3 	bl	8000b40 <update7SEG>
		break;
 80005fa:	e0c3      	b.n	8000784 <fsm_simple_buttons_run+0x3e4>
				counter = counter + 1;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000604:	6013      	str	r3, [r2, #0]
				update7SEG(counter);
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fa98 	bl	8000b40 <update7SEG>
		break;
 8000610:	e0b8      	b.n	8000784 <fsm_simple_buttons_run+0x3e4>
		} else if (isButtonPressed(2) == 1) {
 8000612:	2002      	movs	r0, #2
 8000614:	f7ff fdb0 	bl	8000178 <isButtonPressed>
 8000618:	4603      	mov	r3, r0
 800061a:	2b01      	cmp	r3, #1
 800061c:	d125      	bne.n	800066a <fsm_simple_buttons_run+0x2ca>
			setTimer1(10000);
 800061e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000622:	f000 fc2b 	bl	8000e7c <setTimer1>
			mode = DEC;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <fsm_simple_buttons_run+0x2a8>)
 8000628:	2203      	movs	r2, #3
 800062a:	601a      	str	r2, [r3, #0]
			if (counter == 0) {
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d10f      	bne.n	8000654 <fsm_simple_buttons_run+0x2b4>
				counter = 9;
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 8000636:	2209      	movs	r2, #9
 8000638:	601a      	str	r2, [r3, #0]
				update7SEG(counter);
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <fsm_simple_buttons_run+0x2ac>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fa7e 	bl	8000b40 <update7SEG>
		break;
 8000644:	e09e      	b.n	8000784 <fsm_simple_buttons_run+0x3e4>
 8000646:	bf00      	nop
 8000648:	20000088 	.word	0x20000088
 800064c:	2000008c 	.word	0x2000008c
 8000650:	200000d8 	.word	0x200000d8
				counter = counter - 1;
 8000654:	4b4e      	ldr	r3, [pc, #312]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3b01      	subs	r3, #1
 800065a:	4a4d      	ldr	r2, [pc, #308]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 800065c:	6013      	str	r3, [r2, #0]
				update7SEG(counter);
 800065e:	4b4c      	ldr	r3, [pc, #304]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fa6c 	bl	8000b40 <update7SEG>
		break;
 8000668:	e08c      	b.n	8000784 <fsm_simple_buttons_run+0x3e4>
		else if (timer1_flag == 1) {
 800066a:	4b4a      	ldr	r3, [pc, #296]	; (8000794 <fsm_simple_buttons_run+0x3f4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	f040 8088 	bne.w	8000784 <fsm_simple_buttons_run+0x3e4>
			setTimer2(1000);
 8000674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000678:	f000 fc1c 	bl	8000eb4 <setTimer2>
			mode = AUTO;
 800067c:	4b46      	ldr	r3, [pc, #280]	; (8000798 <fsm_simple_buttons_run+0x3f8>)
 800067e:	2204      	movs	r2, #4
 8000680:	601a      	str	r2, [r3, #0]
		break;
 8000682:	e07f      	b.n	8000784 <fsm_simple_buttons_run+0x3e4>
	case AUTO:
		if (timer2_flag == 1) {
 8000684:	4b45      	ldr	r3, [pc, #276]	; (800079c <fsm_simple_buttons_run+0x3fc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d115      	bne.n	80006b8 <fsm_simple_buttons_run+0x318>
			setTimer2(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f000 fc10 	bl	8000eb4 <setTimer2>
			display7SEG(counter);
 8000694:	4b3e      	ldr	r3, [pc, #248]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f000 f881 	bl	80007a0 <display7SEG>
			if (counter == 0) {
 800069e:	4b3c      	ldr	r3, [pc, #240]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d103      	bne.n	80006ae <fsm_simple_buttons_run+0x30e>
				counter = 0;
 80006a6:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	e004      	b.n	80006b8 <fsm_simple_buttons_run+0x318>
			} else {
				counter--;
 80006ae:	4b38      	ldr	r3, [pc, #224]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	4a36      	ldr	r2, [pc, #216]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 80006b6:	6013      	str	r3, [r2, #0]
			}
		}
		if (isButtonPressed(0) == 1) {
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff fd5d 	bl	8000178 <isButtonPressed>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d10f      	bne.n	80006e4 <fsm_simple_buttons_run+0x344>
			setTimer1(10000);
 80006c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80006c8:	f000 fbd8 	bl	8000e7c <setTimer1>
			mode = RESET_MODE;
 80006cc:	4b32      	ldr	r3, [pc, #200]	; (8000798 <fsm_simple_buttons_run+0x3f8>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
			counter = 0;
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			update7SEG(counter);
 80006d8:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fa2f 	bl	8000b40 <update7SEG>
			} else {
				counter = counter - 1;
				update7SEG(counter);
			}
		}
		break;
 80006e2:	e051      	b.n	8000788 <fsm_simple_buttons_run+0x3e8>
		} else if (isButtonPressed(1) == 1) {
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff fd47 	bl	8000178 <isButtonPressed>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d11e      	bne.n	800072e <fsm_simple_buttons_run+0x38e>
			setTimer1(10000);
 80006f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80006f4:	f000 fbc2 	bl	8000e7c <setTimer1>
			mode = INC;
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <fsm_simple_buttons_run+0x3f8>)
 80006fa:	2202      	movs	r2, #2
 80006fc:	601a      	str	r2, [r3, #0]
			if (counter == 9) {
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b09      	cmp	r3, #9
 8000704:	d108      	bne.n	8000718 <fsm_simple_buttons_run+0x378>
				counter = 0;
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
				update7SEG(counter);
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fa15 	bl	8000b40 <update7SEG>
		break;
 8000716:	e037      	b.n	8000788 <fsm_simple_buttons_run+0x3e8>
				counter = counter + 1;
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 8000720:	6013      	str	r3, [r2, #0]
				update7SEG(counter);
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fa0a 	bl	8000b40 <update7SEG>
		break;
 800072c:	e02c      	b.n	8000788 <fsm_simple_buttons_run+0x3e8>
		} else if (isButtonPressed(2) == 1) {
 800072e:	2002      	movs	r0, #2
 8000730:	f7ff fd22 	bl	8000178 <isButtonPressed>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d126      	bne.n	8000788 <fsm_simple_buttons_run+0x3e8>
			setTimer1(10000);
 800073a:	f242 7010 	movw	r0, #10000	; 0x2710
 800073e:	f000 fb9d 	bl	8000e7c <setTimer1>
			mode = DEC;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <fsm_simple_buttons_run+0x3f8>)
 8000744:	2203      	movs	r2, #3
 8000746:	601a      	str	r2, [r3, #0]
			if (counter == 0) {
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d108      	bne.n	8000762 <fsm_simple_buttons_run+0x3c2>
				counter = 9;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 8000752:	2209      	movs	r2, #9
 8000754:	601a      	str	r2, [r3, #0]
				update7SEG(counter);
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f9f0 	bl	8000b40 <update7SEG>
		break;
 8000760:	e012      	b.n	8000788 <fsm_simple_buttons_run+0x3e8>
				counter = counter - 1;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3b01      	subs	r3, #1
 8000768:	4a09      	ldr	r2, [pc, #36]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 800076a:	6013      	str	r3, [r2, #0]
				update7SEG(counter);
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <fsm_simple_buttons_run+0x3f0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f9e5 	bl	8000b40 <update7SEG>
		break;
 8000776:	e007      	b.n	8000788 <fsm_simple_buttons_run+0x3e8>
	default:
		break;
 8000778:	bf00      	nop
 800077a:	e006      	b.n	800078a <fsm_simple_buttons_run+0x3ea>
		break;
 800077c:	bf00      	nop
 800077e:	e004      	b.n	800078a <fsm_simple_buttons_run+0x3ea>
		break;
 8000780:	bf00      	nop
 8000782:	e002      	b.n	800078a <fsm_simple_buttons_run+0x3ea>
		break;
 8000784:	bf00      	nop
 8000786:	e000      	b.n	800078a <fsm_simple_buttons_run+0x3ea>
		break;
 8000788:	bf00      	nop
	}
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000008c 	.word	0x2000008c
 8000794:	200000d8 	.word	0x200000d8
 8000798:	20000088 	.word	0x20000088
 800079c:	200000e0 	.word	0x200000e0

080007a0 <display7SEG>:
 *      Author: trong
 */

#include "led_display.h"

void display7SEG(int counter) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	//led display number 0 by enable 6 ports as follow (reset state)
	if (counter == 0) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d129      	bne.n	8000802 <display7SEG+0x62>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b4:	48cf      	ldr	r0, [pc, #828]	; (8000af4 <display7SEG+0x354>)
 80007b6:	f000 ff24 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c0:	48cc      	ldr	r0, [pc, #816]	; (8000af4 <display7SEG+0x354>)
 80007c2:	f000 ff1e 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007cc:	48c9      	ldr	r0, [pc, #804]	; (8000af4 <display7SEG+0x354>)
 80007ce:	f000 ff18 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d8:	48c6      	ldr	r0, [pc, #792]	; (8000af4 <display7SEG+0x354>)
 80007da:	f000 ff12 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e4:	48c3      	ldr	r0, [pc, #780]	; (8000af4 <display7SEG+0x354>)
 80007e6:	f000 ff0c 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f0:	48c0      	ldr	r0, [pc, #768]	; (8000af4 <display7SEG+0x354>)
 80007f2:	f000 ff06 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fc:	48bd      	ldr	r0, [pc, #756]	; (8000af4 <display7SEG+0x354>)
 80007fe:	f000 ff00 	bl	8001602 <HAL_GPIO_WritePin>
	}
	//led display number 1 by enable 2 ports as follow (reset state)
	if (counter == 1) {
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d129      	bne.n	800085c <display7SEG+0xbc>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, SET);
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080e:	48b9      	ldr	r0, [pc, #740]	; (8000af4 <display7SEG+0x354>)
 8000810:	f000 fef7 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081a:	48b6      	ldr	r0, [pc, #728]	; (8000af4 <display7SEG+0x354>)
 800081c:	f000 fef1 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000826:	48b3      	ldr	r0, [pc, #716]	; (8000af4 <display7SEG+0x354>)
 8000828:	f000 feeb 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	48b0      	ldr	r0, [pc, #704]	; (8000af4 <display7SEG+0x354>)
 8000834:	f000 fee5 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083e:	48ad      	ldr	r0, [pc, #692]	; (8000af4 <display7SEG+0x354>)
 8000840:	f000 fedf 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084a:	48aa      	ldr	r0, [pc, #680]	; (8000af4 <display7SEG+0x354>)
 800084c:	f000 fed9 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000856:	48a7      	ldr	r0, [pc, #668]	; (8000af4 <display7SEG+0x354>)
 8000858:	f000 fed3 	bl	8001602 <HAL_GPIO_WritePin>
	}
	//led display number 2 by enable 5 ports as follow (reset state)
	if (counter == 2) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d129      	bne.n	80008b6 <display7SEG+0x116>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000868:	48a2      	ldr	r0, [pc, #648]	; (8000af4 <display7SEG+0x354>)
 800086a:	f000 feca 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000874:	489f      	ldr	r0, [pc, #636]	; (8000af4 <display7SEG+0x354>)
 8000876:	f000 fec4 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000880:	489c      	ldr	r0, [pc, #624]	; (8000af4 <display7SEG+0x354>)
 8000882:	f000 febe 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088c:	4899      	ldr	r0, [pc, #612]	; (8000af4 <display7SEG+0x354>)
 800088e:	f000 feb8 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000898:	4896      	ldr	r0, [pc, #600]	; (8000af4 <display7SEG+0x354>)
 800089a:	f000 feb2 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a4:	4893      	ldr	r0, [pc, #588]	; (8000af4 <display7SEG+0x354>)
 80008a6:	f000 feac 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b0:	4890      	ldr	r0, [pc, #576]	; (8000af4 <display7SEG+0x354>)
 80008b2:	f000 fea6 	bl	8001602 <HAL_GPIO_WritePin>
	}
	//led display number 3 by enable 5 ports as follow (reset state)
	if (counter == 3) {
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d129      	bne.n	8000910 <display7SEG+0x170>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	488c      	ldr	r0, [pc, #560]	; (8000af4 <display7SEG+0x354>)
 80008c4:	f000 fe9d 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ce:	4889      	ldr	r0, [pc, #548]	; (8000af4 <display7SEG+0x354>)
 80008d0:	f000 fe97 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008da:	4886      	ldr	r0, [pc, #536]	; (8000af4 <display7SEG+0x354>)
 80008dc:	f000 fe91 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e6:	4883      	ldr	r0, [pc, #524]	; (8000af4 <display7SEG+0x354>)
 80008e8:	f000 fe8b 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f2:	4880      	ldr	r0, [pc, #512]	; (8000af4 <display7SEG+0x354>)
 80008f4:	f000 fe85 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fe:	487d      	ldr	r0, [pc, #500]	; (8000af4 <display7SEG+0x354>)
 8000900:	f000 fe7f 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800090a:	487a      	ldr	r0, [pc, #488]	; (8000af4 <display7SEG+0x354>)
 800090c:	f000 fe79 	bl	8001602 <HAL_GPIO_WritePin>
	}
	//led display number 4 by enable 4 ports as follow (reset state)
	if (counter == 4) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b04      	cmp	r3, #4
 8000914:	d129      	bne.n	800096a <display7SEG+0x1ca>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, SET);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091c:	4875      	ldr	r0, [pc, #468]	; (8000af4 <display7SEG+0x354>)
 800091e:	f000 fe70 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	4872      	ldr	r0, [pc, #456]	; (8000af4 <display7SEG+0x354>)
 800092a:	f000 fe6a 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000934:	486f      	ldr	r0, [pc, #444]	; (8000af4 <display7SEG+0x354>)
 8000936:	f000 fe64 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000940:	486c      	ldr	r0, [pc, #432]	; (8000af4 <display7SEG+0x354>)
 8000942:	f000 fe5e 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094c:	4869      	ldr	r0, [pc, #420]	; (8000af4 <display7SEG+0x354>)
 800094e:	f000 fe58 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000958:	4866      	ldr	r0, [pc, #408]	; (8000af4 <display7SEG+0x354>)
 800095a:	f000 fe52 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000964:	4863      	ldr	r0, [pc, #396]	; (8000af4 <display7SEG+0x354>)
 8000966:	f000 fe4c 	bl	8001602 <HAL_GPIO_WritePin>
	}
	//led display number 5 by enable 5 ports as follow (reset state)
	if (counter == 5) {
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b05      	cmp	r3, #5
 800096e:	d129      	bne.n	80009c4 <display7SEG+0x224>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000976:	485f      	ldr	r0, [pc, #380]	; (8000af4 <display7SEG+0x354>)
 8000978:	f000 fe43 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000982:	485c      	ldr	r0, [pc, #368]	; (8000af4 <display7SEG+0x354>)
 8000984:	f000 fe3d 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800098e:	4859      	ldr	r0, [pc, #356]	; (8000af4 <display7SEG+0x354>)
 8000990:	f000 fe37 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099a:	4856      	ldr	r0, [pc, #344]	; (8000af4 <display7SEG+0x354>)
 800099c:	f000 fe31 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a6:	4853      	ldr	r0, [pc, #332]	; (8000af4 <display7SEG+0x354>)
 80009a8:	f000 fe2b 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b2:	4850      	ldr	r0, [pc, #320]	; (8000af4 <display7SEG+0x354>)
 80009b4:	f000 fe25 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009be:	484d      	ldr	r0, [pc, #308]	; (8000af4 <display7SEG+0x354>)
 80009c0:	f000 fe1f 	bl	8001602 <HAL_GPIO_WritePin>
	}
	//led display number 6 by enable 6 ports as follow (reset state)
	if (counter == 6) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d129      	bne.n	8000a1e <display7SEG+0x27e>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d0:	4848      	ldr	r0, [pc, #288]	; (8000af4 <display7SEG+0x354>)
 80009d2:	f000 fe16 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009dc:	4845      	ldr	r0, [pc, #276]	; (8000af4 <display7SEG+0x354>)
 80009de:	f000 fe10 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e8:	4842      	ldr	r0, [pc, #264]	; (8000af4 <display7SEG+0x354>)
 80009ea:	f000 fe0a 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f4:	483f      	ldr	r0, [pc, #252]	; (8000af4 <display7SEG+0x354>)
 80009f6:	f000 fe04 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a00:	483c      	ldr	r0, [pc, #240]	; (8000af4 <display7SEG+0x354>)
 8000a02:	f000 fdfe 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0c:	4839      	ldr	r0, [pc, #228]	; (8000af4 <display7SEG+0x354>)
 8000a0e:	f000 fdf8 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a18:	4836      	ldr	r0, [pc, #216]	; (8000af4 <display7SEG+0x354>)
 8000a1a:	f000 fdf2 	bl	8001602 <HAL_GPIO_WritePin>
	}
	//led display number 7 by enable 3 ports as follow (reset state)
	if (counter == 7) {
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b07      	cmp	r3, #7
 8000a22:	d129      	bne.n	8000a78 <display7SEG+0x2d8>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2a:	4832      	ldr	r0, [pc, #200]	; (8000af4 <display7SEG+0x354>)
 8000a2c:	f000 fde9 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a36:	482f      	ldr	r0, [pc, #188]	; (8000af4 <display7SEG+0x354>)
 8000a38:	f000 fde3 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a42:	482c      	ldr	r0, [pc, #176]	; (8000af4 <display7SEG+0x354>)
 8000a44:	f000 fddd 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4e:	4829      	ldr	r0, [pc, #164]	; (8000af4 <display7SEG+0x354>)
 8000a50:	f000 fdd7 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5a:	4826      	ldr	r0, [pc, #152]	; (8000af4 <display7SEG+0x354>)
 8000a5c:	f000 fdd1 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a66:	4823      	ldr	r0, [pc, #140]	; (8000af4 <display7SEG+0x354>)
 8000a68:	f000 fdcb 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a72:	4820      	ldr	r0, [pc, #128]	; (8000af4 <display7SEG+0x354>)
 8000a74:	f000 fdc5 	bl	8001602 <HAL_GPIO_WritePin>
	}
	//led display number 8 by enable 7 ports as follow (reset state)
	if (counter == 8) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b08      	cmp	r3, #8
 8000a7c:	d129      	bne.n	8000ad2 <display7SEG+0x332>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a84:	481b      	ldr	r0, [pc, #108]	; (8000af4 <display7SEG+0x354>)
 8000a86:	f000 fdbc 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a90:	4818      	ldr	r0, [pc, #96]	; (8000af4 <display7SEG+0x354>)
 8000a92:	f000 fdb6 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9c:	4815      	ldr	r0, [pc, #84]	; (8000af4 <display7SEG+0x354>)
 8000a9e:	f000 fdb0 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa8:	4812      	ldr	r0, [pc, #72]	; (8000af4 <display7SEG+0x354>)
 8000aaa:	f000 fdaa 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab4:	480f      	ldr	r0, [pc, #60]	; (8000af4 <display7SEG+0x354>)
 8000ab6:	f000 fda4 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <display7SEG+0x354>)
 8000ac2:	f000 fd9e 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <display7SEG+0x354>)
 8000ace:	f000 fd98 	bl	8001602 <HAL_GPIO_WritePin>
	}
	//led display number 9 by enable 6 ports as follow (reset state)
	if (counter == 9) {
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b09      	cmp	r3, #9
 8000ad6:	d12c      	bne.n	8000b32 <display7SEG+0x392>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <display7SEG+0x354>)
 8000ae0:	f000 fd8f 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	4802      	ldr	r0, [pc, #8]	; (8000af4 <display7SEG+0x354>)
 8000aec:	f000 fd89 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	e001      	b.n	8000af8 <display7SEG+0x358>
 8000af4:	40010800 	.word	0x40010800
 8000af8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afc:	480f      	ldr	r0, [pc, #60]	; (8000b3c <display7SEG+0x39c>)
 8000afe:	f000 fd80 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <display7SEG+0x39c>)
 8000b0a:	f000 fd7a 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <display7SEG+0x39c>)
 8000b16:	f000 fd74 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b20:	4806      	ldr	r0, [pc, #24]	; (8000b3c <display7SEG+0x39c>)
 8000b22:	f000 fd6e 	bl	8001602 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <display7SEG+0x39c>)
 8000b2e:	f000 fd68 	bl	8001602 <HAL_GPIO_WritePin>
	}
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40010800 	.word	0x40010800

08000b40 <update7SEG>:

void update7SEG(int data) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	// Display the 7 SEG led to display LED
	display7SEG(data);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fe29 	bl	80007a0 <display7SEG>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <ledBlinky>:

void ledBlinky() {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	if (timer3_flag == 1) {
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <ledBlinky+0x20>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d107      	bne.n	8000b74 <ledBlinky+0x1c>
		setTimer3(1000);
 8000b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b68:	f000 f9c0 	bl	8000eec <setTimer3>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <ledBlinky+0x24>)
 8000b70:	f000 fd5f 	bl	8001632 <HAL_GPIO_TogglePin>
	}
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000e8 	.word	0x200000e8
 8000b7c:	40010800 	.word	0x40010800

08000b80 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b84:	f000 fa3a 	bl	8000ffc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b88:	f000 f812 	bl	8000bb0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b8c:	f000 f898 	bl	8000cc0 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000b90:	f000 f84a 	bl	8000c28 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <main+0x2c>)
 8000b96:	f001 f99d 	bl	8001ed4 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	setTimer3(1000);
 8000b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9e:	f000 f9a5 	bl	8000eec <setTimer3>
	while (1) {
		ledBlinky();
 8000ba2:	f7ff ffd9 	bl	8000b58 <ledBlinky>
		fsm_simple_buttons_run();
 8000ba6:	f7ff fbfb 	bl	80003a0 <fsm_simple_buttons_run>
		ledBlinky();
 8000baa:	e7fa      	b.n	8000ba2 <main+0x22>
 8000bac:	20000090 	.word	0x20000090

08000bb0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b090      	sub	sp, #64	; 0x40
 8000bb4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000bb6:	f107 0318 	add.w	r3, r7, #24
 8000bba:	2228      	movs	r2, #40	; 0x28
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fd40 	bl	8002644 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fd3c 	bl	8001664 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x46>
		Error_Handler();
 8000bf2:	f000 f8bf 	bl	8000d74 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 ffaa 	bl	8001b68 <HAL_RCC_ClockConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x6e>
		Error_Handler();
 8000c1a:	f000 f8ab 	bl	8000d74 <Error_Handler>
	}
}
 8000c1e:	bf00      	nop
 8000c20:	3740      	adds	r7, #64	; 0x40
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c4a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c4e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c52:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c5c:	2209      	movs	r2, #9
 8000c5e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000c6c:	4813      	ldr	r0, [pc, #76]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c6e:	f001 f8e1 	bl	8001e34 <HAL_TIM_Base_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x54>
		Error_Handler();
 8000c78:	f000 f87c 	bl	8000d74 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c8a:	f001 fa77 	bl	800217c <HAL_TIM_ConfigClockSource>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000c94:	f000 f86e 	bl	8000d74 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000ca6:	f001 fc3f 	bl	8002528 <HAL_TIMEx_MasterConfigSynchronization>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000cb0:	f000 f860 	bl	8000d74 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000090 	.word	0x20000090

08000cc0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <MX_GPIO_Init+0x90>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <MX_GPIO_Init+0x90>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <MX_GPIO_Init+0x90>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_GPIO_Init+0x90>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <MX_GPIO_Init+0x90>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_GPIO_Init+0x90>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000d04:	2200      	movs	r2, #0
 8000d06:	f64f 6120 	movw	r1, #65056	; 0xfe20
 8000d0a:	4812      	ldr	r0, [pc, #72]	; (8000d54 <MX_GPIO_Init+0x94>)
 8000d0c:	f000 fc79 	bl	8001602 <HAL_GPIO_WritePin>
			LED_RED_Pin | LED_A_Pin | LED_B_Pin | LED_C_Pin | LED_D_Pin
					| LED_E_Pin | LED_F_Pin | LED_G_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LED_RED_Pin LED_A_Pin LED_B_Pin LED_C_Pin
	 LED_D_Pin LED_E_Pin LED_F_Pin LED_G_Pin */
	GPIO_InitStruct.Pin = LED_RED_Pin | LED_A_Pin | LED_B_Pin | LED_C_Pin
 8000d10:	f64f 6320 	movw	r3, #65056	; 0xfe20
 8000d14:	60bb      	str	r3, [r7, #8]
			| LED_D_Pin | LED_E_Pin | LED_F_Pin | LED_G_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	4619      	mov	r1, r3
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <MX_GPIO_Init+0x94>)
 8000d2a:	f000 fad7 	bl	80012dc <HAL_GPIO_Init>

	/*Configure GPIO pins : RESET_Pin INC_Pin DEC_Pin */
	GPIO_InitStruct.Pin = RESET_Pin | INC_Pin | DEC_Pin;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_GPIO_Init+0x98>)
 8000d42:	f000 facb 	bl	80012dc <HAL_GPIO_Init>

}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010800 	.word	0x40010800
 8000d58:	40010c00 	.word	0x40010c00

08000d5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	timerRun();
 8000d64:	f000 f8de 	bl	8000f24 <timerRun>
	getKeyInput();
 8000d68:	f7ff fa40 	bl	80001ec <getKeyInput>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_MspInit+0x40>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <HAL_MspInit+0x40>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_MspInit+0x40>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_MspInit+0x40>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_MspInit+0x40>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_MspInit+0x40>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd4:	d113      	bne.n	8000dfe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_TIM_Base_MspInit+0x44>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <HAL_TIM_Base_MspInit+0x44>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	61d3      	str	r3, [r2, #28]
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_TIM_Base_MspInit+0x44>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	201c      	movs	r0, #28
 8000df4:	f000 fa3b 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000df8:	201c      	movs	r0, #28
 8000dfa:	f000 fa54 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <NMI_Handler+0x4>

08000e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <MemManage_Handler+0x4>

08000e1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e52:	f000 f919 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <TIM2_IRQHandler+0x10>)
 8000e62:	f001 f883 	bl	8001f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000090 	.word	0x20000090

08000e70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <setTimer1>:
int timer2_counter = 0;

int timer3_flag = 0;
int timer3_counter = 0;

void setTimer1(int duration) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <setTimer1+0x2c>)
 8000e88:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8c:	1092      	asrs	r2, r2, #2
 8000e8e:	17db      	asrs	r3, r3, #31
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	4a06      	ldr	r2, [pc, #24]	; (8000eac <setTimer1+0x30>)
 8000e94:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <setTimer1+0x34>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	66666667 	.word	0x66666667
 8000eac:	200000dc 	.word	0x200000dc
 8000eb0:	200000d8 	.word	0x200000d8

08000eb4 <setTimer2>:

void setTimer2(int duration) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <setTimer2+0x2c>)
 8000ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec4:	1092      	asrs	r2, r2, #2
 8000ec6:	17db      	asrs	r3, r3, #31
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <setTimer2+0x30>)
 8000ecc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <setTimer2+0x34>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	66666667 	.word	0x66666667
 8000ee4:	200000e4 	.word	0x200000e4
 8000ee8:	200000e0 	.word	0x200000e0

08000eec <setTimer3>:

void setTimer3(int duration) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <setTimer3+0x2c>)
 8000ef8:	fb82 1203 	smull	r1, r2, r2, r3
 8000efc:	1092      	asrs	r2, r2, #2
 8000efe:	17db      	asrs	r3, r3, #31
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <setTimer3+0x30>)
 8000f04:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <setTimer3+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	66666667 	.word	0x66666667
 8000f1c:	200000ec 	.word	0x200000ec
 8000f20:	200000e8 	.word	0x200000e8

08000f24 <timerRun>:

void timerRun() {
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <timerRun+0x74>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	dd04      	ble.n	8000f3a <timerRun+0x16>
		timer1_counter--;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <timerRun+0x74>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	4a18      	ldr	r2, [pc, #96]	; (8000f98 <timerRun+0x74>)
 8000f38:	6013      	str	r3, [r2, #0]
	}
	if (timer1_counter <= 0) {
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <timerRun+0x74>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	dc04      	bgt.n	8000f4c <timerRun+0x28>
		timer1_flag++;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <timerRun+0x78>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <timerRun+0x78>)
 8000f4a:	6013      	str	r3, [r2, #0]
	}

	if (timer2_counter > 0) {
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <timerRun+0x7c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dd04      	ble.n	8000f5e <timerRun+0x3a>
		timer2_counter--;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <timerRun+0x7c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <timerRun+0x7c>)
 8000f5c:	6013      	str	r3, [r2, #0]
	}
	if (timer2_counter <= 0) {
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <timerRun+0x7c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	dc04      	bgt.n	8000f70 <timerRun+0x4c>
		timer2_flag++;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <timerRun+0x80>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <timerRun+0x80>)
 8000f6e:	6013      	str	r3, [r2, #0]
	}

	if (timer3_counter > 0) {
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <timerRun+0x84>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	dd04      	ble.n	8000f82 <timerRun+0x5e>
		timer3_counter--;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <timerRun+0x84>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <timerRun+0x84>)
 8000f80:	6013      	str	r3, [r2, #0]
	}
	if (timer3_counter <= 0) {
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <timerRun+0x84>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	dc02      	bgt.n	8000f90 <timerRun+0x6c>
		timer3_flag = 1;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <timerRun+0x88>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
	}
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	200000dc 	.word	0x200000dc
 8000f9c:	200000d8 	.word	0x200000d8
 8000fa0:	200000e4 	.word	0x200000e4
 8000fa4:	200000e0 	.word	0x200000e0
 8000fa8:	200000ec 	.word	0x200000ec
 8000fac:	200000e8 	.word	0x200000e8

08000fb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fd6:	f7ff ff4b 	bl	8000e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f001 fb0f 	bl	80025fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fde:	f7ff fdcf 	bl	8000b80 <main>
  bx lr
 8000fe2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000fec:	08002694 	.word	0x08002694
  ldr r2, =_sbss
 8000ff0:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000ff4:	200000f4 	.word	0x200000f4

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_Init+0x28>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_Init+0x28>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f923 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	200f      	movs	r0, #15
 8001014:	f000 f808 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff feb2 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f93b 	bl	80012c2 <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f000 f903 	bl	800126e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000030 	.word	0x20000030
 8001080:	20000038 	.word	0x20000038
 8001084:	20000034 	.word	0x20000034

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <HAL_IncTick+0x20>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20000038 	.word	0x20000038
 80010a8:	200000f0 	.word	0x200000f0

080010ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	200000f0 	.word	0x200000f0

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4906      	ldr	r1, [pc, #24]	; (8001158 <__NVIC_EnableIRQ+0x34>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff90 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff2d 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff42 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff90 	bl	80011b0 <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5f 	bl	800115c <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff35 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa2 	bl	8001214 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b08b      	sub	sp, #44	; 0x2c
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	e161      	b.n	80015b4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012f0:	2201      	movs	r2, #1
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	429a      	cmp	r2, r3
 800130a:	f040 8150 	bne.w	80015ae <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4a97      	ldr	r2, [pc, #604]	; (8001570 <HAL_GPIO_Init+0x294>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d05e      	beq.n	80013d6 <HAL_GPIO_Init+0xfa>
 8001318:	4a95      	ldr	r2, [pc, #596]	; (8001570 <HAL_GPIO_Init+0x294>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d875      	bhi.n	800140a <HAL_GPIO_Init+0x12e>
 800131e:	4a95      	ldr	r2, [pc, #596]	; (8001574 <HAL_GPIO_Init+0x298>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d058      	beq.n	80013d6 <HAL_GPIO_Init+0xfa>
 8001324:	4a93      	ldr	r2, [pc, #588]	; (8001574 <HAL_GPIO_Init+0x298>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d86f      	bhi.n	800140a <HAL_GPIO_Init+0x12e>
 800132a:	4a93      	ldr	r2, [pc, #588]	; (8001578 <HAL_GPIO_Init+0x29c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d052      	beq.n	80013d6 <HAL_GPIO_Init+0xfa>
 8001330:	4a91      	ldr	r2, [pc, #580]	; (8001578 <HAL_GPIO_Init+0x29c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d869      	bhi.n	800140a <HAL_GPIO_Init+0x12e>
 8001336:	4a91      	ldr	r2, [pc, #580]	; (800157c <HAL_GPIO_Init+0x2a0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d04c      	beq.n	80013d6 <HAL_GPIO_Init+0xfa>
 800133c:	4a8f      	ldr	r2, [pc, #572]	; (800157c <HAL_GPIO_Init+0x2a0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d863      	bhi.n	800140a <HAL_GPIO_Init+0x12e>
 8001342:	4a8f      	ldr	r2, [pc, #572]	; (8001580 <HAL_GPIO_Init+0x2a4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d046      	beq.n	80013d6 <HAL_GPIO_Init+0xfa>
 8001348:	4a8d      	ldr	r2, [pc, #564]	; (8001580 <HAL_GPIO_Init+0x2a4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d85d      	bhi.n	800140a <HAL_GPIO_Init+0x12e>
 800134e:	2b12      	cmp	r3, #18
 8001350:	d82a      	bhi.n	80013a8 <HAL_GPIO_Init+0xcc>
 8001352:	2b12      	cmp	r3, #18
 8001354:	d859      	bhi.n	800140a <HAL_GPIO_Init+0x12e>
 8001356:	a201      	add	r2, pc, #4	; (adr r2, 800135c <HAL_GPIO_Init+0x80>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	080013d7 	.word	0x080013d7
 8001360:	080013b1 	.word	0x080013b1
 8001364:	080013c3 	.word	0x080013c3
 8001368:	08001405 	.word	0x08001405
 800136c:	0800140b 	.word	0x0800140b
 8001370:	0800140b 	.word	0x0800140b
 8001374:	0800140b 	.word	0x0800140b
 8001378:	0800140b 	.word	0x0800140b
 800137c:	0800140b 	.word	0x0800140b
 8001380:	0800140b 	.word	0x0800140b
 8001384:	0800140b 	.word	0x0800140b
 8001388:	0800140b 	.word	0x0800140b
 800138c:	0800140b 	.word	0x0800140b
 8001390:	0800140b 	.word	0x0800140b
 8001394:	0800140b 	.word	0x0800140b
 8001398:	0800140b 	.word	0x0800140b
 800139c:	0800140b 	.word	0x0800140b
 80013a0:	080013b9 	.word	0x080013b9
 80013a4:	080013cd 	.word	0x080013cd
 80013a8:	4a76      	ldr	r2, [pc, #472]	; (8001584 <HAL_GPIO_Init+0x2a8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ae:	e02c      	b.n	800140a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	623b      	str	r3, [r7, #32]
          break;
 80013b6:	e029      	b.n	800140c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	3304      	adds	r3, #4
 80013be:	623b      	str	r3, [r7, #32]
          break;
 80013c0:	e024      	b.n	800140c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	3308      	adds	r3, #8
 80013c8:	623b      	str	r3, [r7, #32]
          break;
 80013ca:	e01f      	b.n	800140c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	330c      	adds	r3, #12
 80013d2:	623b      	str	r3, [r7, #32]
          break;
 80013d4:	e01a      	b.n	800140c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013de:	2304      	movs	r3, #4
 80013e0:	623b      	str	r3, [r7, #32]
          break;
 80013e2:	e013      	b.n	800140c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d105      	bne.n	80013f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ec:	2308      	movs	r3, #8
 80013ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	611a      	str	r2, [r3, #16]
          break;
 80013f6:	e009      	b.n	800140c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f8:	2308      	movs	r3, #8
 80013fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	615a      	str	r2, [r3, #20]
          break;
 8001402:	e003      	b.n	800140c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
          break;
 8001408:	e000      	b.n	800140c <HAL_GPIO_Init+0x130>
          break;
 800140a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2bff      	cmp	r3, #255	; 0xff
 8001410:	d801      	bhi.n	8001416 <HAL_GPIO_Init+0x13a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	e001      	b.n	800141a <HAL_GPIO_Init+0x13e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3304      	adds	r3, #4
 800141a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2bff      	cmp	r3, #255	; 0xff
 8001420:	d802      	bhi.n	8001428 <HAL_GPIO_Init+0x14c>
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	e002      	b.n	800142e <HAL_GPIO_Init+0x152>
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	3b08      	subs	r3, #8
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	210f      	movs	r1, #15
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	401a      	ands	r2, r3
 8001440:	6a39      	ldr	r1, [r7, #32]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	431a      	orrs	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 80a9 	beq.w	80015ae <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800145c:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <HAL_GPIO_Init+0x2ac>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a49      	ldr	r2, [pc, #292]	; (8001588 <HAL_GPIO_Init+0x2ac>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b47      	ldr	r3, [pc, #284]	; (8001588 <HAL_GPIO_Init+0x2ac>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001474:	4a45      	ldr	r2, [pc, #276]	; (800158c <HAL_GPIO_Init+0x2b0>)
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001480:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	220f      	movs	r2, #15
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4013      	ands	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a3d      	ldr	r2, [pc, #244]	; (8001590 <HAL_GPIO_Init+0x2b4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d00d      	beq.n	80014bc <HAL_GPIO_Init+0x1e0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a3c      	ldr	r2, [pc, #240]	; (8001594 <HAL_GPIO_Init+0x2b8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d007      	beq.n	80014b8 <HAL_GPIO_Init+0x1dc>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a3b      	ldr	r2, [pc, #236]	; (8001598 <HAL_GPIO_Init+0x2bc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d101      	bne.n	80014b4 <HAL_GPIO_Init+0x1d8>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e004      	b.n	80014be <HAL_GPIO_Init+0x1e2>
 80014b4:	2303      	movs	r3, #3
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x1e2>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_GPIO_Init+0x1e2>
 80014bc:	2300      	movs	r3, #0
 80014be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ce:	492f      	ldr	r1, [pc, #188]	; (800158c <HAL_GPIO_Init+0x2b0>)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <HAL_GPIO_Init+0x2c0>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	492b      	ldr	r1, [pc, #172]	; (800159c <HAL_GPIO_Init+0x2c0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <HAL_GPIO_Init+0x2c0>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	4927      	ldr	r1, [pc, #156]	; (800159c <HAL_GPIO_Init+0x2c0>)
 8001500:	4013      	ands	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <HAL_GPIO_Init+0x2c0>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4921      	ldr	r1, [pc, #132]	; (800159c <HAL_GPIO_Init+0x2c0>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <HAL_GPIO_Init+0x2c0>)
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	43db      	mvns	r3, r3
 8001526:	491d      	ldr	r1, [pc, #116]	; (800159c <HAL_GPIO_Init+0x2c0>)
 8001528:	4013      	ands	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_GPIO_Init+0x2c0>)
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	4917      	ldr	r1, [pc, #92]	; (800159c <HAL_GPIO_Init+0x2c0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_GPIO_Init+0x2c0>)
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	43db      	mvns	r3, r3
 800154e:	4913      	ldr	r1, [pc, #76]	; (800159c <HAL_GPIO_Init+0x2c0>)
 8001550:	4013      	ands	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01f      	beq.n	80015a0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_GPIO_Init+0x2c0>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	490d      	ldr	r1, [pc, #52]	; (800159c <HAL_GPIO_Init+0x2c0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	60cb      	str	r3, [r1, #12]
 800156c:	e01f      	b.n	80015ae <HAL_GPIO_Init+0x2d2>
 800156e:	bf00      	nop
 8001570:	10320000 	.word	0x10320000
 8001574:	10310000 	.word	0x10310000
 8001578:	10220000 	.word	0x10220000
 800157c:	10210000 	.word	0x10210000
 8001580:	10120000 	.word	0x10120000
 8001584:	10110000 	.word	0x10110000
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	40010800 	.word	0x40010800
 8001594:	40010c00 	.word	0x40010c00
 8001598:	40011000 	.word	0x40011000
 800159c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_GPIO_Init+0x2f4>)
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	4909      	ldr	r1, [pc, #36]	; (80015d0 <HAL_GPIO_Init+0x2f4>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	3301      	adds	r3, #1
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f47f ae96 	bne.w	80012f0 <HAL_GPIO_Init+0x14>
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	372c      	adds	r7, #44	; 0x2c
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40010400 	.word	0x40010400

080015d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e001      	b.n	80015f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr

08001602 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	460b      	mov	r3, r1
 800160c:	807b      	strh	r3, [r7, #2]
 800160e:	4613      	mov	r3, r2
 8001610:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001612:	787b      	ldrb	r3, [r7, #1]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001618:	887a      	ldrh	r2, [r7, #2]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800161e:	e003      	b.n	8001628 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	041a      	lsls	r2, r3, #16
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	611a      	str	r2, [r3, #16]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001632:	b480      	push	{r7}
 8001634:	b085      	sub	sp, #20
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001644:	887a      	ldrh	r2, [r7, #2]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4013      	ands	r3, r2
 800164a:	041a      	lsls	r2, r3, #16
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	43d9      	mvns	r1, r3
 8001650:	887b      	ldrh	r3, [r7, #2]
 8001652:	400b      	ands	r3, r1
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	611a      	str	r2, [r3, #16]
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e272      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8087 	beq.w	8001792 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001684:	4b92      	ldr	r3, [pc, #584]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b04      	cmp	r3, #4
 800168e:	d00c      	beq.n	80016aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001690:	4b8f      	ldr	r3, [pc, #572]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 030c 	and.w	r3, r3, #12
 8001698:	2b08      	cmp	r3, #8
 800169a:	d112      	bne.n	80016c2 <HAL_RCC_OscConfig+0x5e>
 800169c:	4b8c      	ldr	r3, [pc, #560]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a8:	d10b      	bne.n	80016c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016aa:	4b89      	ldr	r3, [pc, #548]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d06c      	beq.n	8001790 <HAL_RCC_OscConfig+0x12c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d168      	bne.n	8001790 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e24c      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x76>
 80016cc:	4b80      	ldr	r3, [pc, #512]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a7f      	ldr	r2, [pc, #508]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	e02e      	b.n	8001738 <HAL_RCC_OscConfig+0xd4>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x98>
 80016e2:	4b7b      	ldr	r3, [pc, #492]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a7a      	ldr	r2, [pc, #488]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b78      	ldr	r3, [pc, #480]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a77      	ldr	r2, [pc, #476]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e01d      	b.n	8001738 <HAL_RCC_OscConfig+0xd4>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0xbc>
 8001706:	4b72      	ldr	r3, [pc, #456]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a71      	ldr	r2, [pc, #452]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800170c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	4b6f      	ldr	r3, [pc, #444]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a6e      	ldr	r2, [pc, #440]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e00b      	b.n	8001738 <HAL_RCC_OscConfig+0xd4>
 8001720:	4b6b      	ldr	r3, [pc, #428]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a6a      	ldr	r2, [pc, #424]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a67      	ldr	r2, [pc, #412]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001736:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d013      	beq.n	8001768 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fcb4 	bl	80010ac <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff fcb0 	bl	80010ac <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e200      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b5d      	ldr	r3, [pc, #372]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0xe4>
 8001766:	e014      	b.n	8001792 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fca0 	bl	80010ac <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff fc9c 	bl	80010ac <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1ec      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001782:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x10c>
 800178e:	e000      	b.n	8001792 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d063      	beq.n	8001866 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800179e:	4b4c      	ldr	r3, [pc, #304]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00b      	beq.n	80017c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017aa:	4b49      	ldr	r3, [pc, #292]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d11c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x18c>
 80017b6:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d116      	bne.n	80017f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c2:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <HAL_RCC_OscConfig+0x176>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d001      	beq.n	80017da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e1c0      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017da:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4939      	ldr	r1, [pc, #228]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ee:	e03a      	b.n	8001866 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d020      	beq.n	800183a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f8:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <HAL_RCC_OscConfig+0x270>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fc55 	bl	80010ac <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001806:	f7ff fc51 	bl	80010ac <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e1a1      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001824:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4927      	ldr	r1, [pc, #156]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]
 8001838:	e015      	b.n	8001866 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183a:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_RCC_OscConfig+0x270>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fc34 	bl	80010ac <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001848:	f7ff fc30 	bl	80010ac <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e180      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d03a      	beq.n	80018e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d019      	beq.n	80018ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7ff fc14 	bl	80010ac <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001888:	f7ff fc10 	bl	80010ac <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e160      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_RCC_OscConfig+0x26c>)
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018a6:	2001      	movs	r0, #1
 80018a8:	f000 faa6 	bl	8001df8 <RCC_Delay>
 80018ac:	e01c      	b.n	80018e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_RCC_OscConfig+0x274>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b4:	f7ff fbfa 	bl	80010ac <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ba:	e00f      	b.n	80018dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018bc:	f7ff fbf6 	bl	80010ac <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d908      	bls.n	80018dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e146      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	42420000 	.word	0x42420000
 80018d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018dc:	4b92      	ldr	r3, [pc, #584]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1e9      	bne.n	80018bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80a6 	beq.w	8001a42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fa:	4b8b      	ldr	r3, [pc, #556]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10d      	bne.n	8001922 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b88      	ldr	r3, [pc, #544]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a87      	ldr	r2, [pc, #540]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	61d3      	str	r3, [r2, #28]
 8001912:	4b85      	ldr	r3, [pc, #532]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191e:	2301      	movs	r3, #1
 8001920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	4b82      	ldr	r3, [pc, #520]	; (8001b2c <HAL_RCC_OscConfig+0x4c8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192a:	2b00      	cmp	r3, #0
 800192c:	d118      	bne.n	8001960 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192e:	4b7f      	ldr	r3, [pc, #508]	; (8001b2c <HAL_RCC_OscConfig+0x4c8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a7e      	ldr	r2, [pc, #504]	; (8001b2c <HAL_RCC_OscConfig+0x4c8>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193a:	f7ff fbb7 	bl	80010ac <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001942:	f7ff fbb3 	bl	80010ac <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b64      	cmp	r3, #100	; 0x64
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e103      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	4b75      	ldr	r3, [pc, #468]	; (8001b2c <HAL_RCC_OscConfig+0x4c8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x312>
 8001968:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4a6e      	ldr	r2, [pc, #440]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6213      	str	r3, [r2, #32]
 8001974:	e02d      	b.n	80019d2 <HAL_RCC_OscConfig+0x36e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x334>
 800197e:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4a69      	ldr	r2, [pc, #420]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6213      	str	r3, [r2, #32]
 800198a:	4b67      	ldr	r3, [pc, #412]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4a66      	ldr	r2, [pc, #408]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	f023 0304 	bic.w	r3, r3, #4
 8001994:	6213      	str	r3, [r2, #32]
 8001996:	e01c      	b.n	80019d2 <HAL_RCC_OscConfig+0x36e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b05      	cmp	r3, #5
 800199e:	d10c      	bne.n	80019ba <HAL_RCC_OscConfig+0x356>
 80019a0:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4a60      	ldr	r2, [pc, #384]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	6213      	str	r3, [r2, #32]
 80019ac:	4b5e      	ldr	r3, [pc, #376]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a5d      	ldr	r2, [pc, #372]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6213      	str	r3, [r2, #32]
 80019b8:	e00b      	b.n	80019d2 <HAL_RCC_OscConfig+0x36e>
 80019ba:	4b5b      	ldr	r3, [pc, #364]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4a5a      	ldr	r2, [pc, #360]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	6213      	str	r3, [r2, #32]
 80019c6:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a57      	ldr	r2, [pc, #348]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	f023 0304 	bic.w	r3, r3, #4
 80019d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d015      	beq.n	8001a06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019da:	f7ff fb67 	bl	80010ac <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7ff fb63 	bl	80010ac <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e0b1      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f8:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0ee      	beq.n	80019e2 <HAL_RCC_OscConfig+0x37e>
 8001a04:	e014      	b.n	8001a30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fb51 	bl	80010ac <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff fb4d 	bl	80010ac <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e09b      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a24:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d105      	bne.n	8001a42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a36:	4b3c      	ldr	r3, [pc, #240]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a3b      	ldr	r2, [pc, #236]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8087 	beq.w	8001b5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d061      	beq.n	8001b1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d146      	bne.n	8001aee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a60:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <HAL_RCC_OscConfig+0x4cc>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff fb21 	bl	80010ac <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7ff fb1d 	bl	80010ac <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e06d      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a94:	d108      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	4921      	ldr	r1, [pc, #132]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a19      	ldr	r1, [r3, #32]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	491b      	ldr	r1, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_RCC_OscConfig+0x4cc>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff faf1 	bl	80010ac <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff faed 	bl	80010ac <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e03d      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x46a>
 8001aec:	e035      	b.n	8001b5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_RCC_OscConfig+0x4cc>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fada 	bl	80010ac <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff fad6 	bl	80010ac <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e026      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x498>
 8001b1a:	e01e      	b.n	8001b5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e019      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40007000 	.word	0x40007000
 8001b30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_OscConfig+0x500>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000

08001b68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0d0      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b6a      	ldr	r3, [pc, #424]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d910      	bls.n	8001bac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b67      	ldr	r3, [pc, #412]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0207 	bic.w	r2, r3, #7
 8001b92:	4965      	ldr	r1, [pc, #404]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0b8      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d020      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc4:	4b59      	ldr	r3, [pc, #356]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a58      	ldr	r2, [pc, #352]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4a52      	ldr	r2, [pc, #328]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001be6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be8:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	494d      	ldr	r1, [pc, #308]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d040      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d115      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e07f      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c26:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e073      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c36:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e06b      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c46:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f023 0203 	bic.w	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4936      	ldr	r1, [pc, #216]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c58:	f7ff fa28 	bl	80010ac <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c60:	f7ff fa24 	bl	80010ac <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e053      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 020c 	and.w	r2, r3, #12
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d1eb      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d210      	bcs.n	8001cb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 0207 	bic.w	r2, r3, #7
 8001c9e:	4922      	ldr	r1, [pc, #136]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e032      	b.n	8001d1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4916      	ldr	r1, [pc, #88]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	490e      	ldr	r1, [pc, #56]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cf6:	f000 f821 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	490a      	ldr	r1, [pc, #40]	; (8001d30 <HAL_RCC_ClockConfig+0x1c8>)
 8001d08:	5ccb      	ldrb	r3, [r1, r3]
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_RCC_ClockConfig+0x1cc>)
 8001d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_ClockConfig+0x1d0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f986 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40022000 	.word	0x40022000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	0800267c 	.word	0x0800267c
 8001d34:	20000030 	.word	0x20000030
 8001d38:	20000034 	.word	0x20000034

08001d3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	b490      	push	{r4, r7}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d42:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d44:	1d3c      	adds	r4, r7, #4
 8001d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d4c:	f240 2301 	movw	r3, #513	; 0x201
 8001d50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d002      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x40>
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x46>
 8001d7a:	e02b      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d7e:	623b      	str	r3, [r7, #32]
      break;
 8001d80:	e02b      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	0c9b      	lsrs	r3, r3, #18
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3328      	adds	r3, #40	; 0x28
 8001d8c:	443b      	add	r3, r7
 8001d8e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d92:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d012      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	0c5b      	lsrs	r3, r3, #17
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	3328      	adds	r3, #40	; 0x28
 8001daa:	443b      	add	r3, r7
 8001dac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001db0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001db6:	fb03 f202 	mul.w	r2, r3, r2
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc2:	e004      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	623b      	str	r3, [r7, #32]
      break;
 8001dd2:	e002      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dd6:	623b      	str	r3, [r7, #32]
      break;
 8001dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dda:	6a3b      	ldr	r3, [r7, #32]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc90      	pop	{r4, r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	0800266c 	.word	0x0800266c
 8001dec:	40021000 	.word	0x40021000
 8001df0:	007a1200 	.word	0x007a1200
 8001df4:	003d0900 	.word	0x003d0900

08001df8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <RCC_Delay+0x34>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <RCC_Delay+0x38>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	0a5b      	lsrs	r3, r3, #9
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e14:	bf00      	nop
  }
  while (Delay --);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1e5a      	subs	r2, r3, #1
 8001e1a:	60fa      	str	r2, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f9      	bne.n	8001e14 <RCC_Delay+0x1c>
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	20000030 	.word	0x20000030
 8001e30:	10624dd3 	.word	0x10624dd3

08001e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e041      	b.n	8001eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe ffb2 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3304      	adds	r3, #4
 8001e70:	4619      	mov	r1, r3
 8001e72:	4610      	mov	r0, r2
 8001e74:	f000 fa6a 	bl	800234c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d001      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e035      	b.n	8001f58 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <HAL_TIM_Base_Start_IT+0x90>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d009      	beq.n	8001f22 <HAL_TIM_Base_Start_IT+0x4e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f16:	d004      	beq.n	8001f22 <HAL_TIM_Base_Start_IT+0x4e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <HAL_TIM_Base_Start_IT+0x94>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d111      	bne.n	8001f46 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b06      	cmp	r3, #6
 8001f32:	d010      	beq.n	8001f56 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f44:	e007      	b.n	8001f56 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0201 	orr.w	r2, r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	40000400 	.word	0x40000400

08001f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d122      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0202 	mvn.w	r2, #2
 8001f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f9b1 	bl	8002316 <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f9a4 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f9b3 	bl	8002328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d122      	bne.n	800201c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d11b      	bne.n	800201c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0204 	mvn.w	r2, #4
 8001fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f987 	bl	8002316 <HAL_TIM_IC_CaptureCallback>
 8002008:	e005      	b.n	8002016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f97a 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f989 	bl	8002328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b08      	cmp	r3, #8
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b08      	cmp	r3, #8
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0208 	mvn.w	r2, #8
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2204      	movs	r2, #4
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f95d 	bl	8002316 <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f950 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f95f 	bl	8002328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b10      	cmp	r3, #16
 800207c:	d122      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b10      	cmp	r3, #16
 800208a:	d11b      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0210 	mvn.w	r2, #16
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2208      	movs	r2, #8
 800209a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f933 	bl	8002316 <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f926 	bl	8002304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f935 	bl	8002328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0201 	mvn.w	r2, #1
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fe36 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fa:	2b80      	cmp	r3, #128	; 0x80
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002108:	2b80      	cmp	r3, #128	; 0x80
 800210a:	d107      	bne.n	800211c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fa67 	bl	80025ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d10e      	bne.n	8002148 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d107      	bne.n	8002148 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8f9 	bl	800233a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b20      	cmp	r3, #32
 8002154:	d10e      	bne.n	8002174 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b20      	cmp	r3, #32
 8002162:	d107      	bne.n	8002174 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0220 	mvn.w	r2, #32
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fa32 	bl	80025d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_TIM_ConfigClockSource+0x18>
 8002190:	2302      	movs	r3, #2
 8002192:	e0b3      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x180>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021cc:	d03e      	beq.n	800224c <HAL_TIM_ConfigClockSource+0xd0>
 80021ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d2:	f200 8087 	bhi.w	80022e4 <HAL_TIM_ConfigClockSource+0x168>
 80021d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021da:	f000 8085 	beq.w	80022e8 <HAL_TIM_ConfigClockSource+0x16c>
 80021de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e2:	d87f      	bhi.n	80022e4 <HAL_TIM_ConfigClockSource+0x168>
 80021e4:	2b70      	cmp	r3, #112	; 0x70
 80021e6:	d01a      	beq.n	800221e <HAL_TIM_ConfigClockSource+0xa2>
 80021e8:	2b70      	cmp	r3, #112	; 0x70
 80021ea:	d87b      	bhi.n	80022e4 <HAL_TIM_ConfigClockSource+0x168>
 80021ec:	2b60      	cmp	r3, #96	; 0x60
 80021ee:	d050      	beq.n	8002292 <HAL_TIM_ConfigClockSource+0x116>
 80021f0:	2b60      	cmp	r3, #96	; 0x60
 80021f2:	d877      	bhi.n	80022e4 <HAL_TIM_ConfigClockSource+0x168>
 80021f4:	2b50      	cmp	r3, #80	; 0x50
 80021f6:	d03c      	beq.n	8002272 <HAL_TIM_ConfigClockSource+0xf6>
 80021f8:	2b50      	cmp	r3, #80	; 0x50
 80021fa:	d873      	bhi.n	80022e4 <HAL_TIM_ConfigClockSource+0x168>
 80021fc:	2b40      	cmp	r3, #64	; 0x40
 80021fe:	d058      	beq.n	80022b2 <HAL_TIM_ConfigClockSource+0x136>
 8002200:	2b40      	cmp	r3, #64	; 0x40
 8002202:	d86f      	bhi.n	80022e4 <HAL_TIM_ConfigClockSource+0x168>
 8002204:	2b30      	cmp	r3, #48	; 0x30
 8002206:	d064      	beq.n	80022d2 <HAL_TIM_ConfigClockSource+0x156>
 8002208:	2b30      	cmp	r3, #48	; 0x30
 800220a:	d86b      	bhi.n	80022e4 <HAL_TIM_ConfigClockSource+0x168>
 800220c:	2b20      	cmp	r3, #32
 800220e:	d060      	beq.n	80022d2 <HAL_TIM_ConfigClockSource+0x156>
 8002210:	2b20      	cmp	r3, #32
 8002212:	d867      	bhi.n	80022e4 <HAL_TIM_ConfigClockSource+0x168>
 8002214:	2b00      	cmp	r3, #0
 8002216:	d05c      	beq.n	80022d2 <HAL_TIM_ConfigClockSource+0x156>
 8002218:	2b10      	cmp	r3, #16
 800221a:	d05a      	beq.n	80022d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800221c:	e062      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6899      	ldr	r1, [r3, #8]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f000 f95c 	bl	80024ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002240:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	609a      	str	r2, [r3, #8]
      break;
 800224a:	e04e      	b.n	80022ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6899      	ldr	r1, [r3, #8]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f000 f945 	bl	80024ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800226e:	609a      	str	r2, [r3, #8]
      break;
 8002270:	e03b      	b.n	80022ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6859      	ldr	r1, [r3, #4]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	461a      	mov	r2, r3
 8002280:	f000 f8bc 	bl	80023fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2150      	movs	r1, #80	; 0x50
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f913 	bl	80024b6 <TIM_ITRx_SetConfig>
      break;
 8002290:	e02b      	b.n	80022ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6859      	ldr	r1, [r3, #4]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	461a      	mov	r2, r3
 80022a0:	f000 f8da 	bl	8002458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2160      	movs	r1, #96	; 0x60
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f903 	bl	80024b6 <TIM_ITRx_SetConfig>
      break;
 80022b0:	e01b      	b.n	80022ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6859      	ldr	r1, [r3, #4]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	461a      	mov	r2, r3
 80022c0:	f000 f89c 	bl	80023fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2140      	movs	r1, #64	; 0x40
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f8f3 	bl	80024b6 <TIM_ITRx_SetConfig>
      break;
 80022d0:	e00b      	b.n	80022ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4619      	mov	r1, r3
 80022dc:	4610      	mov	r0, r2
 80022de:	f000 f8ea 	bl	80024b6 <TIM_ITRx_SetConfig>
        break;
 80022e2:	e002      	b.n	80022ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022e4:	bf00      	nop
 80022e6:	e000      	b.n	80022ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a25      	ldr	r2, [pc, #148]	; (80023f4 <TIM_Base_SetConfig+0xa8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d007      	beq.n	8002374 <TIM_Base_SetConfig+0x28>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236a:	d003      	beq.n	8002374 <TIM_Base_SetConfig+0x28>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <TIM_Base_SetConfig+0xac>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d108      	bne.n	8002386 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <TIM_Base_SetConfig+0xa8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d007      	beq.n	800239e <TIM_Base_SetConfig+0x52>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002394:	d003      	beq.n	800239e <TIM_Base_SetConfig+0x52>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <TIM_Base_SetConfig+0xac>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d108      	bne.n	80023b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <TIM_Base_SetConfig+0xa8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d103      	bne.n	80023e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	615a      	str	r2, [r3, #20]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40000400 	.word	0x40000400

080023fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	f023 0201 	bic.w	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f023 030a 	bic.w	r3, r3, #10
 8002438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	621a      	str	r2, [r3, #32]
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f023 0210 	bic.w	r2, r3, #16
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002482:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	031b      	lsls	r3, r3, #12
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	621a      	str	r2, [r3, #32]
}
 80024ac:	bf00      	nop
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f043 0307 	orr.w	r3, r3, #7
 80024d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	609a      	str	r2, [r3, #8]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b087      	sub	sp, #28
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002504:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	021a      	lsls	r2, r3, #8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	431a      	orrs	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4313      	orrs	r3, r2
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	609a      	str	r2, [r3, #8]
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800253c:	2302      	movs	r3, #2
 800253e:	e041      	b.n	80025c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d009      	beq.n	8002598 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258c:	d004      	beq.n	8002598 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d10c      	bne.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800259e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40012c00 	.word	0x40012c00
 80025d4:	40000400 	.word	0x40000400

080025d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <__libc_init_array>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	2600      	movs	r6, #0
 8002600:	4d0c      	ldr	r5, [pc, #48]	; (8002634 <__libc_init_array+0x38>)
 8002602:	4c0d      	ldr	r4, [pc, #52]	; (8002638 <__libc_init_array+0x3c>)
 8002604:	1b64      	subs	r4, r4, r5
 8002606:	10a4      	asrs	r4, r4, #2
 8002608:	42a6      	cmp	r6, r4
 800260a:	d109      	bne.n	8002620 <__libc_init_array+0x24>
 800260c:	f000 f822 	bl	8002654 <_init>
 8002610:	2600      	movs	r6, #0
 8002612:	4d0a      	ldr	r5, [pc, #40]	; (800263c <__libc_init_array+0x40>)
 8002614:	4c0a      	ldr	r4, [pc, #40]	; (8002640 <__libc_init_array+0x44>)
 8002616:	1b64      	subs	r4, r4, r5
 8002618:	10a4      	asrs	r4, r4, #2
 800261a:	42a6      	cmp	r6, r4
 800261c:	d105      	bne.n	800262a <__libc_init_array+0x2e>
 800261e:	bd70      	pop	{r4, r5, r6, pc}
 8002620:	f855 3b04 	ldr.w	r3, [r5], #4
 8002624:	4798      	blx	r3
 8002626:	3601      	adds	r6, #1
 8002628:	e7ee      	b.n	8002608 <__libc_init_array+0xc>
 800262a:	f855 3b04 	ldr.w	r3, [r5], #4
 800262e:	4798      	blx	r3
 8002630:	3601      	adds	r6, #1
 8002632:	e7f2      	b.n	800261a <__libc_init_array+0x1e>
 8002634:	0800268c 	.word	0x0800268c
 8002638:	0800268c 	.word	0x0800268c
 800263c:	0800268c 	.word	0x0800268c
 8002640:	08002690 	.word	0x08002690

08002644 <memset>:
 8002644:	4603      	mov	r3, r0
 8002646:	4402      	add	r2, r0
 8002648:	4293      	cmp	r3, r2
 800264a:	d100      	bne.n	800264e <memset+0xa>
 800264c:	4770      	bx	lr
 800264e:	f803 1b01 	strb.w	r1, [r3], #1
 8002652:	e7f9      	b.n	8002648 <memset+0x4>

08002654 <_init>:
 8002654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002656:	bf00      	nop
 8002658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265a:	bc08      	pop	{r3}
 800265c:	469e      	mov	lr, r3
 800265e:	4770      	bx	lr

08002660 <_fini>:
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	bf00      	nop
 8002664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002666:	bc08      	pop	{r3}
 8002668:	469e      	mov	lr, r3
 800266a:	4770      	bx	lr
